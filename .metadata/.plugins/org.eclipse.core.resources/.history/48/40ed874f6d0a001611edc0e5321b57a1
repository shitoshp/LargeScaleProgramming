import java.util.ArrayList;
import java.util.Collections;

public class Polynomial {
	
	private ArrayList<Term> polynomial_list;
	private ArrayList<Term> reverse_polynomial_list;
	private String polynomialString = "";
	
	public Polynomial(){
		polynomial_list = new ArrayList();
	}
		
	public String get_polynomialString(){
		int sign;
		String term1 = polynomial_list.get(0).toString();
		polynomialString += term1;
		for (int i = 1; i < polynomial_list.size(); i++){
			String term = polynomial_list.get(i).toString();
			
			
			polynomialString += term;
		}
		return polynomialString;
	}
	
	public void insert(int x, int y){
		Term insert_term = new Term(x, y);
		if (polynomial_list.isEmpty()) {
			//System.out.println("IsEmpty");
			polynomial_list.add(insert_term);
		}
		else{
			//System.out.println(polynomial_list.size());
			int size = polynomial_list.size();
			boolean added = false;
			for (int i = 0; i < size; i++){
				
				//System.out.println(i);
				if (polynomial_list.get(i).getExponent() < insert_term.getExponent()){
					polynomial_list.add((i), insert_term);
					added = true;
					break;
				}
				
				
			}
			if (added == false){
				polynomial_list.add(insert_term);
				added = true;
			}
			
		}
		//System.out.println(polynomial_list.size());

	}
	
	public void delete(int x, int y){
		//System.out.println("deleting term");
		Term delete_term = new Term(x, y);
		//System.out.println(polynomial_list.size());
		for (int i = 0; i < polynomial_list.size(); i++){
			//System.out.println("1deleting term");
			Term term = polynomial_list.get(i);
			if (term.equals(delete_term)){
				//System.out.println("deleting term");
				polynomial_list.remove(term);
			};
		}
	}
	
	public void reverse(){
		Collections.reverse(polynomial_list);
		System.out.println("reversing");
	}
	
	public String product(){
		int c_product = 1;
		int e_sum = 0;
		for (int i = 0; i < polynomial_list.size(); i++){
			int c = polynomial_list.get(i).getCoefficient();
			int e = polynomial_list.get(i).getExponent();
			c_product = c_product * c;
			e_sum = e_sum + e;
		}
		Term product_term = new Term(c_product, e_sum);
		return product_term.toString();
	}
}
